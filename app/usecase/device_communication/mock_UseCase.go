// Code generated by mockery v1.0.0. DO NOT EDIT.

package device_communication

import mock "github.com/stretchr/testify/mock"

// MockUseCase is an autogenerated mock type for the UseCase type
type MockUseCase struct {
	mock.Mock
}

// AddPolicyToClient provides a mock function with given fields: client, policy
func (_m *MockUseCase) AddPolicyToClient(client string, policy string) error {
	ret := _m.Called(client, policy)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(client, policy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveClientFromPolicy provides a mock function with given fields: client, policy
func (_m *MockUseCase) RemoveClientsFromPolicy(client string, policy string) error {
	ret := _m.Called(client, policy)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(client, policy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemovePolicyFromClient provides a mock function with given fields: client, policy
func (_m *MockUseCase) RemovePolicyFromClient(client string, policy string) error {
	ret := _m.Called(client, policy)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(client, policy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchNewClient provides a mock function with given fields:
func (_m *MockUseCase) SearchNewClient() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
