// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/wade-sam/fyp-backup-server/entity"
)

// MockUseCase is an autogenerated mock type for the UseCase type
type MockUseCase struct {
	mock.Mock
}

// CreatePolicy provides a mock function with given fields: policyname, backupType, retention, fullbackup, incrementalbackup, clients
func (_m *MockUseCase) CreatePolicy(policyname string, backupType string, retention int, fullbackup []string, incrementalbackup []string, clients []string) (*entity.Policy, error) {
	ret := _m.Called(policyname, backupType, retention, fullbackup, incrementalbackup, clients)

	var r0 *entity.Policy
	if rf, ok := ret.Get(0).(func(string, string, int, []string, []string, []string) *entity.Policy); ok {
		r0 = rf(policyname, backupType, retention, fullbackup, incrementalbackup, clients)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int, []string, []string, []string) error); ok {
		r1 = rf(policyname, backupType, retention, fullbackup, incrementalbackup, clients)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePolicy provides a mock function with given fields: name
func (_m *MockUseCase) DeletePolicy(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPolicy provides a mock function with given fields: name
func (_m *MockUseCase) GetPolicy(name string) (*entity.Policy, error) {
	ret := _m.Called(name)

	var r0 *entity.Policy
	if rf, ok := ret.Get(0).(func(string) *entity.Policy); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPolicies provides a mock function with given fields: name
func (_m *MockUseCase) ListPolicies(name string) ([]*entity.Policy, error) {
	ret := _m.Called(name)

	var r0 []*entity.Policy
	if rf, ok := ret.Get(0).(func(string) []*entity.Policy); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePolicy provides a mock function with given fields: policy
func (_m *MockUseCase) UpdatePolicy(policy *entity.Policy) error {
	ret := _m.Called(policy)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Policy) error); ok {
		r0 = rf(policy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
